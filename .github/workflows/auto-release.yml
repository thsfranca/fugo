---
name: Auto Release on PR Labels

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: read

jobs:
  auto-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check for release labels
        id: check-labels
        run: |
          echo "🔍 Checking PR labels for release triggers..."
          cd tools/release-manager
          go build -o release-manager .
          
          # Check labels and capture output
          LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          OUTPUT=$(./release-manager check-labels "$LABELS")
          echo "$OUTPUT"
          
          # Extract release-type from output and set GitHub output
          RELEASE_TYPE=$(echo "$OUTPUT" | grep "^release-type=" | cut -d'=' -f2)
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.check-labels.outputs.release-type != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        if: steps.check-labels.outputs.release-type != 'none'
        id: bump-version
        run: |
          echo "⬆️ Bumping version..."
          cd tools/release-manager
          
          # Bump version and capture output
          OUTPUT=$(./release-manager bump-version "${{ steps.check-labels.outputs.release-type }}")
          echo "$OUTPUT"
          
          # Extract version info from output and set GitHub outputs
          OLD_VERSION=$(echo "$OUTPUT" | grep "^old-version=" | cut -d'=' -f2)
          NEW_VERSION=$(echo "$OUTPUT" | grep "^new-version=" | cut -d'=' -f2)
          
          echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release commit and tag
        if: steps.check-labels.outputs.release-type != 'none'
        run: |
          echo "🏷️ Creating release commit and tag..."
          ./scripts/create-release-tag.sh \
            "${{ steps.bump-version.outputs.new-version }}" \
            "${{ steps.bump-version.outputs.old-version }}" \
            "${{ github.event.pull_request.number }}" \
            "${{ steps.check-labels.outputs.release-type }}"

      - name: Create release notes
        if: steps.check-labels.outputs.release-type != 'none'
        id: create-notes
        run: |
          echo "📝 Creating release notes..."
          cd tools/release-manager
          
          # Create PR data JSON for the tool
          PR_DATA=$(cat << 'EOF'
          {
            "number": ${{ github.event.pull_request.number }},
            "title": "${{ github.event.pull_request.title }}",
            "body": "${{ github.event.pull_request.body }}",
            "author": "${{ github.event.pull_request.user.login }}",
            "release_type": "${{ steps.check-labels.outputs.release-type }}"
          }
          EOF
          )
          
          # Create release notes and capture output
          NOTES_OUTPUT=$(./release-manager create-notes "$PR_DATA")
          echo "$NOTES_OUTPUT"
          
          # Extract release notes for GitHub Release
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          echo "## Release v${{ steps.bump-version.outputs.new-version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Release Type**: ${{ steps.check-labels.outputs.release-type }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Changes:**" >> $GITHUB_OUTPUT
          echo "- ${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump-version.outputs.old-version }}...v${{ steps.bump-version.outputs.new-version }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check-labels.outputs.release-type != 'none'
        run: |
          echo "🚀 Creating GitHub Release..."
          
          # Determine if this is a prerelease
          PRERELEASE_FLAG=""
          if [[ "${{ steps.check-labels.outputs.release-type }}" =~ ^(alpha|beta|rc)$ ]]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          # Create placeholder artifacts
          mkdir -p dist
          echo "# Vex Language v${{ steps.bump-version.outputs.new-version }}" > dist/README.md
          echo "Basic transpiler with working features:" >> dist/README.md
          echo "- Variable definitions: (def x 10) → x := 10" >> dist/README.md
          echo "- Arithmetic expressions: (+ 1 2) → 1 + 2" >> dist/README.md
          echo "- CLI tool: fugo-transpiler" >> dist/README.md
          
          # Package examples
          tar -czf dist/vex-examples-v${{ steps.bump-version.outputs.new-version }}.tar.gz examples/
          
          # Create the GitHub Release
          gh release create "v${{ steps.bump-version.outputs.new-version }}" \
            --title "Vex v${{ steps.bump-version.outputs.new-version }}" \
            --notes "${{ steps.create-notes.outputs.release-notes }}" \
            $PRERELEASE_FLAG \
            dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Success notification
        if: steps.check-labels.outputs.release-type != 'none'
        run: |
          echo "🎉 Auto-release completed successfully!"
          echo ""
          echo "📋 Details:"
          echo "  • Version: ${{ steps.bump-version.outputs.old-version }} → ${{ steps.bump-version.outputs.new-version }}"
          echo "  • Tag: v${{ steps.bump-version.outputs.new-version }}"
          echo "  • GitHub Release: Created"
          echo "  • Triggered by: PR #${{ github.event.pull_request.number }}"
          echo "  • Release type: ${{ steps.check-labels.outputs.release-type }}"
          echo ""
          echo "🔗 Check the release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.bump-version.outputs.new-version }}"