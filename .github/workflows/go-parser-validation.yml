---
name: Vex Go Parser Generation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Run weekly to catch platform-specific issues
  schedule:
    - cron: '0 6 * * 1' # Monday 6 AM UTC

env:
  ANTLR_VERSION: '4.13.1'
  GO_VERSION: '1.21'

jobs:
  # Always runs - detects if we need to run tests
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      grammar-changed: ${{ steps.changes.outputs.grammar-changed }}
      needs-testing: ${{ steps.decision.outputs.needs-testing }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for relevant changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            grammar-changed:
              - 'tools/grammar/**'
              
      - name: Decide if testing needed
        id: decision
        run: |
          if [ "${{ steps.changes.outputs.grammar-changed }}" == "true" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            echo "needs-testing=true" >> $GITHUB_OUTPUT
            echo "üß™ Tests will run: Grammar changes or scheduled run"
          else
            echo "needs-testing=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Tests will be skipped: No relevant changes"
          fi

  test-go-parser-generation:
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.needs-testing == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      # Platform-specific ANTLR setup
      - name: Install ANTLR (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          ANTLR_VERSION: ${{ env.ANTLR_VERSION }}
        run: .github/scripts/parser/install-antlr-unix.sh

      - name: Install ANTLR (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        env:
          ANTLR_VERSION: ${{ env.ANTLR_VERSION }}
        run: .github/scripts/parser/install-antlr-windows.ps1

      # Go runtime setup
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Generate Go parser
      - name: Generate Go parser (Linux/macOS)
        if: runner.os != 'Windows'
        run: .github/scripts/parser/generate-go-parser-unix.sh

      - name: Generate Go parser (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: .github/scripts/parser/generate-go-parser-windows.ps1

      # Verify generated Go files
      - name: Verify generated Go files
        run: .github/scripts/parser/verify-generated-files.sh
        shell: bash

      # Test Go compilation
      - name: Test Go compilation
        run: .github/scripts/parser/test-compilation.sh

      # Upload artifacts for debugging
      - name: Upload generated Go parser
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: go-parser-${{ matrix.os }}
          path: tools/gen/go/
          retention-days: 7

  # Gateway job - ALWAYS runs and reports status (make this required in branch protection)
  go-parser-validation-required:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-go-parser-generation]
    if: always()
    steps:
      - name: Evaluate results
        run: |
          echo "üìä Evaluation Summary:"
          echo "  - Grammar changed: ${{ needs.detect-changes.outputs.grammar-changed }}"
          echo "  - Tests needed: ${{ needs.detect-changes.outputs.needs-testing }}"
          echo "  - Tests result: ${{ needs.test-go-parser-generation.result }}"
          
          if [ "${{ needs.detect-changes.outputs.needs-testing }}" == "true" ]; then
            echo "üß™ Grammar tests were required and ran"
            if [ "${{ needs.test-go-parser-generation.result }}" == "success" ]; then
              echo "‚úÖ All parser generation tests passed!"
              exit 0
            else
              echo "‚ùå Parser generation tests failed!"
              exit 1
            fi
          else
            echo "‚úÖ No grammar changes detected - parser generation tests skipped (OK)"
            exit 0
          fi

