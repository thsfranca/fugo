---
name: Flux Go Parser Generation

on:
  push:
    branches: [main]
    paths:
      - 'tools/grammar/**'
  pull_request:
    branches: [main]
    paths:
      - 'tools/grammar/**'
  # Run weekly to catch platform-specific issues
  schedule:
    - cron: '0 6 * * 1' # Monday 6 AM UTC

env:
  ANTLR_VERSION: '4.13.1'
  GO_VERSION: '1.21'

jobs:
  test-go-parser-generation:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      # Platform-specific ANTLR setup
      - name: Install ANTLR (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          wget https://www.antlr.org/download/antlr-${{ env.ANTLR_VERSION }}-complete.jar -O /tmp/antlr.jar
          sudo mkdir -p /usr/local/lib
          sudo mv /tmp/antlr.jar /usr/local/lib/
          echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
          echo 'java -jar /usr/local/lib/antlr.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
          sudo chmod +x /usr/local/bin/antlr4

      - name: Install ANTLR (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $url = "https://www.antlr.org/download/antlr-${{ env.ANTLR_VERSION }}-complete.jar"
          $output = "$env:USERPROFILE\antlr.jar"
          Invoke-WebRequest -Uri $url -OutFile $output
          
          # Create batch file for antlr4 command
          $batchContent = "@echo off`njava -jar `"$output`" %*"
          $batchFile = "$env:USERPROFILE\antlr4.bat"
          $batchContent | Out-File -FilePath $batchFile -Encoding ASCII
          
          # Add to PATH
          echo "$env:USERPROFILE" >> $env:GITHUB_PATH

      # Go runtime setup
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Generate Go parser
      - name: Generate Go parser (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "🔨 Generating Go parser on ${{ matrix.os }}..."
          cd tools/grammar
          antlr4 -Dlanguage=Go -listener -visitor Flux.g4 -o ../gen/go/
          echo "✅ Go parser generation completed"

      - name: Generate Go parser (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "🔨 Generating Go parser on ${{ matrix.os }}..."
          cd tools/grammar
          antlr4.bat -Dlanguage=Go -listener -visitor Flux.g4 -o ../gen/go/
          Write-Host "✅ Go parser generation completed"

      # Verify generated Go files
      - name: Verify generated Go files
        run: |
          echo "🔍 Verifying generated Go parser files..."
          
          if [ -f "tools/gen/go/flux_lexer.go" ] && [ -f "tools/gen/go/flux_parser.go" ]; then
            echo "✅ Go parser files generated successfully"
          else
            echo "❌ Missing Go parser files"
            ls -la tools/gen/go/ || echo "Directory doesn't exist"
            exit 1
          fi
        shell: bash

      # Test Go compilation
      - name: Test Go compilation
        run: |
          echo "🧪 Testing Go parser compilation..."
          cd tools/gen/go
          go mod init flux-parser-test || true
          go mod tidy || true
          if go build .; then
            echo "✅ Go parser compiles successfully"
          else
            echo "❌ Go parser compilation failed"
            exit 1
          fi

      # Upload artifacts for debugging
      - name: Upload generated Go parser
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: go-parser-${{ matrix.os }}
          path: tools/gen/go/
          retention-days: 7

  # Summary job
  go-parser-summary:
    runs-on: ubuntu-latest
    needs: test-go-parser-generation
    if: always()
    steps:
      - name: Check results
        run: |
          echo "🏁 Go parser generation summary:"
          
          if [ "${{ needs.test-go-parser-generation.result }}" = "success" ]; then
            echo "✅ Go parser generated successfully on all platforms"
            echo "🎉 Flux grammar is ready for Go transpilation!"
          else
            echo "❌ Go parser generation failed on some platforms"
            echo "💡 Check the job logs and artifacts for debugging"
            exit 1
          fi

