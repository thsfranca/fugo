name: Vex Extension

on:
  push:
    branches: [ main, feature/vscode-extension-clean ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Detect changes to extension files
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      extension-files: ${{ steps.changes.outputs.extension-files }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect VSCode extension file changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          extension-files:
            - 'vscode-extension/**'
            - 'examples/**/*.vx'

  # Skip job for non-extension changes
  skip-validation:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.extension-files == 'false' }}
    steps:
    - name: Skip VSCode extension validation
      run: |
        echo "✅ Skipping VSCode extension validation - no extension files changed"
        echo "Changed files are only: Go code, CI workflows, docs, etc."

  # Main extension validation
  validate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.extension-files == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'vscode-extension/package.json'
        
    - name: Install VSCode extension dependencies
      run: |
        cd vscode-extension
        npm install
        
    - name: Install extension development tools
      run: |
        npm install -g eslint prettier
        # Install specific vsce version that's compatible with Node 20
        npm install -g @vscode/vsce@latest
        
    - name: Lint VSCode extension JavaScript
      run: |
        cd vscode-extension
        echo "🔍 Linting JavaScript files..."
        
        # Create basic .eslintrc.json if it doesn't exist
        if [ ! -f .eslintrc.json ]; then
          cat > .eslintrc.json << 'EOF'
        {
          "env": {
            "node": true,
            "es2021": true
          },
          "extends": ["eslint:recommended"],
          "parserOptions": {
            "ecmaVersion": 12,
            "sourceType": "module"
          },
          "rules": {
            "no-unused-vars": "warn",
            "no-console": "off"
          }
        }
        EOF
        fi
        
        # Lint JavaScript files
        eslint *.js --format=stylish || {
          echo "⚠️ Linting issues found - treating as warnings for VSCode extension"
          exit 0
        }
        
    - name: Check VSCode extension code formatting
      run: |
        cd vscode-extension
        echo "🎨 Checking code formatting..."
        
        # Create basic .prettierrc if it doesn't exist
        if [ ! -f .prettierrc ]; then
          cat > .prettierrc << 'EOF'
        {
          "semi": true,
          "trailingComma": "es5",
          "singleQuote": true,
          "printWidth": 100,
          "tabWidth": 2
        }
        EOF
        fi
        
        prettier --check *.js *.json || {
          echo "⚠️ Formatting issues found - showing diff:"
          prettier --list-different *.js *.json || true
          echo "💡 Run 'prettier --write *.js *.json' to fix formatting"
          exit 0
        }
        
    - name: Validate VSCode extension manifest
      run: |
        cd vscode-extension
        echo "📋 Validating package.json structure..."
        
        # Validate JSON syntax
        node -e "
          const pkg = JSON.parse(require('fs').readFileSync('package.json'));
          console.log('✅ package.json is valid JSON');
          
          // Check required fields for VSCode extension
          const required = ['name', 'version', 'engines', 'contributes'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.log('❌ Missing required fields:', missing);
            process.exit(1);
          }
          
          console.log('✅ Required extension fields present');
          console.log('📦 Extension:', pkg.name, 'v' + pkg.version);
        "
        
    - name: Validate Vex syntax highlighting grammar
      run: |
        cd vscode-extension
        echo "🎨 Validating syntax highlighting grammar..."
        
        if [ -f "syntaxes/vex-minimal.tmLanguage.json" ]; then
          node -e "
            const grammar = JSON.parse(require('fs').readFileSync('syntaxes/vex-minimal.tmLanguage.json'));
            console.log('✅ TextMate grammar is valid JSON');
            
            // Check required grammar fields
            const required = ['name', 'scopeName', 'patterns'];
            const missing = required.filter(field => !grammar[field]);
            if (missing.length > 0) {
              console.log('❌ Missing required grammar fields:', missing);
              process.exit(1);
            }
            
            console.log('✅ TextMate grammar structure valid');
            console.log('🎯 Scope:', grammar.scopeName);
          "
        else
          echo "⚠️ No TextMate grammar found - skipping validation"
        fi
        
    - name: Validate Vex color themes
      run: |
        cd vscode-extension
        echo "🌈 Validating color themes..."
        
        for theme in themes/*.json; do
          if [ -f "$theme" ]; then
            echo "Validating: $theme"
            node -e "
              const theme = JSON.parse(require('fs').readFileSync('$theme'));
              console.log('✅ Theme JSON valid:', '$theme');
              
              if (theme.colors) {
                console.log('🎨 Color definitions found:', Object.keys(theme.colors).length);
              }
              if (theme.tokenColors) {
                console.log('🔤 Token color rules found:', theme.tokenColors.length);
              }
            "
          fi
        done
        
    - name: Set up Go (for extension testing)
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Test syntax highlighting with sample Vex code
      run: |
        cd vscode-extension
        # Build and use extension tester
        cd ../tools/extension-tester
        go build -o extension-tester .
        cd ../../vscode-extension
        ../tools/extension-tester/extension-tester create-samples
        
    - name: Package VSCode extension (.vsix)
      run: |
        cd vscode-extension
        ../tools/extension-tester/extension-tester package
        
    - name: Verify VSCode extension package integrity
      run: |
        cd vscode-extension
        ../tools/extension-tester/extension-tester verify
        
    - name: Upload VSCode extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: vex-vscode-extension-build
        path: vscode-extension/vex-test-build.vsix
        retention-days: 7

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, skip-validation, validate]
    if: always()
    steps:
    - name: Set up Go (for summary)
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Report VSCode extension validation results
      env:
        EXTENSION_FILES: ${{ needs.detect-changes.outputs.extension-files }}
        VALIDATE_RESULT: ${{ needs.validate.result }}
        SKIP_RESULT: ${{ needs.skip-validation.result }}
      run: |
        cd tools/extension-tester
        go build -o extension-tester .
        ./extension-tester summary >> $GITHUB_STEP_SUMMARY