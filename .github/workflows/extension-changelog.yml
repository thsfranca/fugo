---
name: Extension Changelog

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [main]
  push:
    branches: [main]
    paths:
      - 'vscode-extension/**'
      - '.github/workflows/extension-changelog.yml'

env:
  NODE_VERSION: '20'

jobs:
  # Detect extension changes
  detect-extension-changes:
    runs-on: ubuntu-latest
    outputs:
      extension-files: ${{ steps.changes.outputs.extension-files }}
      has-changelog: ${{ steps.check-changelog.outputs.has-changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect extension file changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          extension-files:
            - 'vscode-extension/**'
            - '!vscode-extension/CHANGELOG.md'

    - name: Check for changelog entry
      id: check-changelog
      if: ${{ steps.changes.outputs.extension-files == 'true' }}
      run: |
        echo "üîç Checking for changelog entry..."

        # Check if CHANGELOG.md was modified in this PR/commit
        if git diff --name-only HEAD~1..HEAD | grep -q "vscode-extension/CHANGELOG.md"; then
          echo "‚úÖ Changelog entry found"
          echo "has-changelog=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No changelog entry found"
          echo "has-changelog=false" >> $GITHUB_OUTPUT
        fi

  # Check changelog requirements for PR
  check-changelog-in-pr:
    runs-on: ubuntu-latest
    needs: detect-extension-changes
    if: ${{ github.event_name == 'pull_request' && needs.detect-extension-changes.outputs.extension-files == 'true' }}
    steps:
    - name: Add changelog reminder comment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;

          // Check if we already commented
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('üìù Changelog will be updated automatically')
          );

          if (!botComment) {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `üìù **Changelog will be updated automatically** when this PR is merged to main.\n\nThe changelog entry will use this PR's title: "${context.payload.pull_request.title}"\n\nIf you want to customize the changelog entry, please update the PR title before merging.`
            });
          }

  # Auto-update changelog on merge to main
  update-changelog-on-merge:
    runs-on: ubuntu-latest
    needs: detect-extension-changes
    if: ${{ needs.detect-extension-changes.outputs.extension-files == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Initialize changelog if missing
      run: |
        cd vscode-extension

        if [ ! -f CHANGELOG.md ]; then
          echo "üìù Creating simple CHANGELOG.md..."
          cat > CHANGELOG.md << 'EOF'
        # Changelog

        Simple changelog for the Fugo VSCode Extension.

        ## [Unreleased]

        EOF
        fi

    - name: Simple changelog update
      run: |
        cd vscode-extension
        echo "üìù Updating changelog for merge to main..."

        # Get current version and date
        CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
        DATE=$(date +%Y-%m-%d)
        echo "üì¶ Version: $CURRENT_VERSION ($DATE)"

        # Get simple commit summary since last release
        LAST_VERSION=$(grep -E "^## \[[0-9]" CHANGELOG.md | head -1 | sed 's/.*\[\([^]]*\)\].*/\1/' || echo "none")

        if [[ "$LAST_VERSION" != "none" ]] && git tag | grep -q "^v$LAST_VERSION$"; then
          COMMIT_COUNT=$(git rev-list --count v$LAST_VERSION..HEAD -- "../vscode-extension/" | grep -v "docs: update extension changelog" || echo "0")
        else
          COMMIT_COUNT=$(git rev-list --count HEAD -- "../vscode-extension/" | grep -v "docs: update extension changelog" || echo "0")
        fi

        # Get entry from commit message (usually PR title for merges)
        if [[ -n "${{ github.event.head_commit.message }}" ]]; then
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          # For merge commits, the PR title is typically the last non-empty line
          if echo "$COMMIT_MSG" | grep -q "Merge pull request"; then
            ENTRY=$(echo "$COMMIT_MSG" | grep -v "^$" | tail -1 | sed 's/^[[:space:]]*//')
          else
            # For direct commits, use the first line
            ENTRY=$(echo "$COMMIT_MSG" | head -1 | sed 's/^[[:space:]]*//')
          fi
        else
          ENTRY="Extension improvements and updates"
        fi

        # Fallback if entry is empty or still contains merge text
        if [[ -z "$ENTRY" ]] || [[ "$ENTRY" == *"Merge pull request"* ]] || [[ "$ENTRY" == *"from "* ]]; then
          ENTRY="Extension improvements and updates"
        fi

        echo "üìù Changelog entry: $ENTRY"

        # Update changelog with simple format
        if grep -q "## \[Unreleased\]" CHANGELOG.md; then
          sed -i "s/## \[Unreleased\]/## [$CURRENT_VERSION] - $DATE\n\n- $ENTRY/" CHANGELOG.md
        else
          sed -i "/^The format is based on/a\\
        \\
        ## [$CURRENT_VERSION] - $DATE\\
        \\
        - $ENTRY\\
        " CHANGELOG.md
        fi

        # Add simple unreleased section
        sed -i "/^## \[$CURRENT_VERSION\]/i\\
        ## [Unreleased]\\
        \\
        " CHANGELOG.md

        echo "‚úÖ Simple changelog updated for v$CURRENT_VERSION"

    - name: Check for changelog changes
      id: check-changes
      run: |
        cd vscode-extension

        if git diff --quiet CHANGELOG.md; then
          echo "‚ÑπÔ∏è No changelog changes to create PR for"
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          BRANCH_NAME="changelog-update-v${CURRENT_VERSION}-$(date +%s)"

          echo "üìù Changelog changes detected"
          echo "üåø Branch: $BRANCH_NAME"
          echo "üì¶ Version: $CURRENT_VERSION"

          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create changelog update PR
      if: steps.check-changes.outputs.has-changes == 'true'
      run: |
        cd vscode-extension

        BRANCH_NAME="${{ steps.check-changes.outputs.branch-name }}"
        CURRENT_VERSION="${{ steps.check-changes.outputs.version }}"

        echo "üìù Creating changelog update PR..."
        echo "üåø Branch: $BRANCH_NAME"
        echo "üì¶ Version: $CURRENT_VERSION"

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"

        # Commit changelog changes
        git add CHANGELOG.md
        git commit -m "docs: update extension changelog for v${CURRENT_VERSION} - Automatically generated changelog update after merge to main. [skip ci]"

        # Push branch
        git push origin "$BRANCH_NAME"

        echo "‚úÖ Changelog committed to branch $BRANCH_NAME"

    - name: Create pull request
      if: steps.check-changes.outputs.has-changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = '${{ steps.check-changes.outputs.branch-name }}';
          const version = '${{ steps.check-changes.outputs.version }}';

          // Check if branch exists (if we just created it)
          try {
            await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName
            });
          } catch (error) {
            console.log('‚ùå Branch not found, skipping PR creation');
            return;
          }

          // Create PR
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `docs: update extension changelog for v${version}`,
            head: branchName,
            base: 'main',
            body: `ü§ñ **Automated changelog update**\n\nThis PR updates the extension changelog after a merge to main.\n\n**Changes:**\n- Updates \`vscode-extension/CHANGELOG.md\` with version ${version}\n\n**Auto-generated** - This PR can be safely merged.`
          });

          console.log(`‚úÖ Created PR #${pr.data.number}: ${pr.data.html_url}`);

          // Enable auto-merge
          try {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number,
              merge_method: 'squash'
            });
            console.log('üéØ PR auto-merged successfully');
          } catch (error) {
            console.log('‚ÑπÔ∏è Could not auto-merge (likely due to branch protection) - manual merge required');
            console.log('Error:', error.message);
          }

  # Generate release notes
  generate-release-notes:
    runs-on: ubuntu-latest
    needs: [detect-extension-changes, update-changelog-on-merge]
    if: ${{ needs.detect-extension-changes.outputs.extension-files == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract release notes
      run: |
        cd vscode-extension

        if [ -f CHANGELOG.md ]; then
          echo "üìã Extracting release notes from changelog..."

          # Get the latest version section from changelog
          VERSION=$(node -e "console.log(require('./package.json').version)" 2>/dev/null || echo "unknown")

          # Extract content between current version and next version/end
          awk -v version="$VERSION" '
            /^## \[/{
              if (found) exit
              if ($0 ~ "\\[" version "\\]") found=1
              next
            }
            found && /^### / { print $0; next }
            found && /^- / { print $0; next }
            found && /^$/ { print $0; next }
          ' CHANGELOG.md > /tmp/release_notes.md

          if [ -s /tmp/release_notes.md ]; then
            echo "üìù Release notes for v$VERSION:"
            echo "---"
            cat /tmp/release_notes.md
            echo "---"

            # Store as step summary
            echo "## üì¶ Extension Release Notes v$VERSION" >> $GITHUB_STEP_SUMMARY
            cat /tmp/release_notes.md >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No release notes found for version $VERSION"
          fi
        else
          echo "‚ö†Ô∏è CHANGELOG.md not found"
        fi

  # Summary job
  changelog-summary:
    runs-on: ubuntu-latest
    needs: [detect-extension-changes, check-changelog-in-pr, update-changelog-on-merge, generate-release-notes]
    if: always() && needs.detect-extension-changes.outputs.extension-files == 'true'
    steps:
    - name: Report changelog status
      run: |
        echo "## ü§ñ Automated Changelog Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "üîç **PR Auto-Update Mode**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Changelog automatically updated in PR with title" >> $GITHUB_STEP_SUMMARY
          echo "üìù No protected branch issues - changes in PR branch" >> $GITHUB_STEP_SUMMARY

        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "üöÄ **Auto-Generation Mode**" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.update-changelog-on-merge.result }}" == "success" ]]; then
            echo "‚úÖ Changelog auto-generated and updated" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.generate-release-notes.result }}" == "success" ]]; then
            echo "üìù Release notes generated" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéØ **Protected Branch Compatible Process:**" >> $GITHUB_STEP_SUMMARY
        echo "- üìù Auto-updates changelog in PR using PR title" >> $GITHUB_STEP_SUMMARY
        echo "- üõ°Ô∏è Works with protected main branch (no push conflicts)" >> $GITHUB_STEP_SUMMARY
        echo "- üìÖ Auto-versions with current package.json version" >> $GITHUB_STEP_SUMMARY
        echo "- üöÄ Zero maintenance required for study project" >> $GITHUB_STEP_SUMMARY
