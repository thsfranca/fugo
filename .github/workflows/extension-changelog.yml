name: Extension Changelog

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'vscode-extension/**'
  push:
    branches: [ main ]
    paths:
      - 'vscode-extension/**'

env:
  NODE_VERSION: '20'

jobs:
  # Detect extension changes
  detect-extension-changes:
    runs-on: ubuntu-latest
    outputs:
      extension-files: ${{ steps.changes.outputs.extension-files }}
      has-changelog: ${{ steps.check-changelog.outputs.has-changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect extension file changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          extension-files:
            - 'vscode-extension/**'
            - '!vscode-extension/CHANGELOG.md'
            
    - name: Check for changelog entry
      id: check-changelog
      if: ${{ steps.changes.outputs.extension-files == 'true' }}
      run: |
        echo "🔍 Checking for changelog entry..."
        
        # Check if CHANGELOG.md was modified in this PR/commit
        if git diff --name-only HEAD~1..HEAD | grep -q "vscode-extension/CHANGELOG.md"; then
          echo "✅ Changelog entry found"
          echo "has-changelog=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ No changelog entry found"
          echo "has-changelog=false" >> $GITHUB_OUTPUT
        fi

  # Preview changelog on PRs  
  preview-changelog:
    runs-on: ubuntu-latest
    needs: detect-extension-changes
    if: ${{ needs.detect-extension-changes.outputs.extension-files == 'true' && github.event_name == 'pull_request' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Simple changelog preview
      run: |
        echo "📋 Simple changelog preview for PR..."
        echo ""
        echo "## 📝 Will be added to changelog on merge:"
        echo ""
        echo "- Extension improvements and updates"
        echo ""
        echo "✅ Changelog automatically maintained!"

  # Auto-update changelog on merge to main
  update-changelog-on-merge:
    runs-on: ubuntu-latest
    needs: detect-extension-changes
    if: ${{ needs.detect-extension-changes.outputs.extension-files == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Initialize changelog if missing
      run: |
        cd vscode-extension
        
        if [ ! -f CHANGELOG.md ]; then
          echo "📝 Creating simple CHANGELOG.md..."
          cat > CHANGELOG.md << 'EOF'
        # Changelog

        Simple changelog for the Fugo VSCode Extension.

        ## [Unreleased]

        EOF
        fi
        
    - name: Simple changelog update
      run: |
        cd vscode-extension
        echo "📝 Updating changelog for merge to main..."
        
        # Get current version and date
        CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
        DATE=$(date +%Y-%m-%d)
        echo "📦 Version: $CURRENT_VERSION ($DATE)"
        
        # Get simple commit summary since last release
        LAST_VERSION=$(grep -E "^## \[[0-9]" CHANGELOG.md | head -1 | sed 's/.*\[\([^]]*\)\].*/\1/' || echo "none")
        
        if [[ "$LAST_VERSION" != "none" ]] && git tag | grep -q "^v$LAST_VERSION$"; then
          COMMIT_COUNT=$(git rev-list --count v$LAST_VERSION..HEAD -- "../vscode-extension/" | grep -v "docs: update extension changelog" || echo "0")
        else
          COMMIT_COUNT=$(git rev-list --count HEAD -- "../vscode-extension/" | grep -v "docs: update extension changelog" || echo "0")
        fi
        
        # Simple entry
        if [[ "$COMMIT_COUNT" -gt 0 ]]; then
          ENTRY="Extension improvements and updates"
        else
          ENTRY="Version bump"
        fi
        
        # Update changelog with simple format
        if grep -q "## \[Unreleased\]" CHANGELOG.md; then
          sed -i "s/## \[Unreleased\]/## [$CURRENT_VERSION] - $DATE\n\n- $ENTRY/" CHANGELOG.md
        else
          sed -i "/^The format is based on/a\\
        \\
        ## [$CURRENT_VERSION] - $DATE\\
        \\
        - $ENTRY\\
        " CHANGELOG.md
        fi
        
        # Add simple unreleased section
        sed -i "/^## \[$CURRENT_VERSION\]/i\\
        ## [Unreleased]\\
        \\
        " CHANGELOG.md
        
        echo "✅ Simple changelog updated for v$CURRENT_VERSION"
        
    - name: Commit changelog updates
      run: |
        cd vscode-extension
        
        if git diff --quiet CHANGELOG.md; then
          echo "ℹ️ No changelog changes to commit"
        else
          echo "📝 Committing changelog updates..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add CHANGELOG.md
          git commit -m "docs: update extension changelog for v$(node -e "console.log(require('./package.json').version)") [skip ci]"
          git push
          
          echo "✅ Changelog committed and pushed"
        fi

  # Generate release notes
  generate-release-notes:
    runs-on: ubuntu-latest
    needs: [detect-extension-changes, update-changelog-on-merge]
    if: ${{ needs.detect-extension-changes.outputs.extension-files == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract release notes
      run: |
        cd vscode-extension
        
        if [ -f CHANGELOG.md ]; then
          echo "📋 Extracting release notes from changelog..."
          
          # Get the latest version section from changelog
          VERSION=$(node -e "console.log(require('./package.json').version)" 2>/dev/null || echo "unknown")
          
          # Extract content between current version and next version/end
          awk -v version="$VERSION" '
            /^## \[/{
              if (found) exit
              if ($0 ~ "\\[" version "\\]") found=1
              next
            }
            found && /^### / { print $0; next }
            found && /^- / { print $0; next }
            found && /^$/ { print $0; next }
          ' CHANGELOG.md > /tmp/release_notes.md
          
          if [ -s /tmp/release_notes.md ]; then
            echo "📝 Release notes for v$VERSION:"
            echo "---"
            cat /tmp/release_notes.md
            echo "---"
            
            # Store as step summary
            echo "## 📦 Extension Release Notes v$VERSION" >> $GITHUB_STEP_SUMMARY
            cat /tmp/release_notes.md >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No release notes found for version $VERSION"
          fi
        else
          echo "⚠️ CHANGELOG.md not found"
        fi

  # Summary job
  changelog-summary:
    runs-on: ubuntu-latest
    needs: [detect-extension-changes, preview-changelog, update-changelog-on-merge, generate-release-notes]
    if: always() && needs.detect-extension-changes.outputs.extension-files == 'true'
    steps:
    - name: Report changelog status
      run: |
        echo "## 🤖 Automated Changelog Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "🔍 **PR Preview Mode**" >> $GITHUB_STEP_SUMMARY
          echo "✅ Auto-generated changelog preview created" >> $GITHUB_STEP_SUMMARY
          echo "📝 Changelog will be automatically updated on merge" >> $GITHUB_STEP_SUMMARY
          
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "🚀 **Auto-Generation Mode**" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.update-changelog-on-merge.result }}" == "success" ]]; then
            echo "✅ Changelog auto-generated and updated" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.generate-release-notes.result }}" == "success" ]]; then
            echo "📝 Release notes generated" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Simple Automated Process:**" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Auto-adds simple entries on merge" >> $GITHUB_STEP_SUMMARY
        echo "- 📅 Auto-versions with current package.json version" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Zero maintenance required for study project" >> $GITHUB_STEP_SUMMARY