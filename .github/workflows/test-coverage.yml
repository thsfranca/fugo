name: Test Coverage Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Job to detect what files changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.changes.outputs.go-files }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          go-files:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'tools/grammar/**'
            - 'Makefile'
            - '.github/workflows/**'

  test-coverage:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for accurate coverage comparison
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        go mod tidy
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
    
    - name: Run tests with coverage
      run: |
        # Create coverage directory
        mkdir -p coverage
        
        # Run tests with coverage for different packages
        go test -v -coverprofile=coverage/parser.out ./internal/frontend/parser/... || echo "parser package not found yet"
        go test -v -coverprofile=coverage/transpiler.out ./internal/transpiler/... || echo "transpiler package not found yet"
        go test -v -coverprofile=coverage/types.out ./internal/types/... || echo "types package not found yet"
        go test -v -coverprofile=coverage/stdlib.out ./stdlib/... || echo "stdlib package not found yet"
        go test -v -coverprofile=coverage/overall.out ./... || echo "running basic tests"
        
        # Generate overall coverage
        go test -v -coverprofile=coverage/total.out -coverpkg=./... ./...
    
    - name: Calculate coverage percentages
      id: coverage
      run: |
        # Function to calculate coverage from profile
        calculate_coverage() {
          local file=$1
          if [ -f "$file" ]; then
            go tool cover -func="$file" | grep "total:" | awk '{print $3}' | sed 's/%//'
          else
            echo "0"
          fi
        }
        
        # Calculate coverage for each component
        PARSER_COV=$(calculate_coverage "coverage/parser.out")
        TRANSPILER_COV=$(calculate_coverage "coverage/transpiler.out") 
        TYPES_COV=$(calculate_coverage "coverage/types.out")
        STDLIB_COV=$(calculate_coverage "coverage/stdlib.out")
        TOTAL_COV=$(calculate_coverage "coverage/total.out")
        
        # Set outputs for later steps
        echo "parser_coverage=$PARSER_COV" >> $GITHUB_OUTPUT
        echo "transpiler_coverage=$TRANSPILER_COV" >> $GITHUB_OUTPUT
        echo "types_coverage=$TYPES_COV" >> $GITHUB_OUTPUT
        echo "stdlib_coverage=$STDLIB_COV" >> $GITHUB_OUTPUT
        echo "total_coverage=$TOTAL_COV" >> $GITHUB_OUTPUT
        
        # Print coverage summary
        echo "## Coverage Summary"
        echo "Parser: $PARSER_COV%"
        echo "Transpiler: $TRANSPILER_COV%"
        echo "Types: $TYPES_COV%"
        echo "Standard Library: $STDLIB_COV%"
        echo "Total: $TOTAL_COV%"
    
    - name: Check coverage thresholds
      run: |
        # Define minimum coverage thresholds
        MIN_PARSER=95
        MIN_TRANSPILER=90
        MIN_TYPES=85
        MIN_STDLIB=80
        MIN_TOTAL=75  # Overall project minimum
        
        # Check each component
        PARSER_COV=${{ steps.coverage.outputs.parser_coverage }}
        TRANSPILER_COV=${{ steps.coverage.outputs.transpiler_coverage }}
        TYPES_COV=${{ steps.coverage.outputs.types_coverage }}
        STDLIB_COV=${{ steps.coverage.outputs.stdlib_coverage }}
        TOTAL_COV=${{ steps.coverage.outputs.total_coverage }}
        
        FAILED=false
        
        # Check parser coverage (if parser exists)
        if [ -f "coverage/parser.out" ] && [ $(echo "$PARSER_COV < $MIN_PARSER" | bc -l) -eq 1 ]; then
          echo "❌ Parser coverage ($PARSER_COV%) is below minimum ($MIN_PARSER%)"
          FAILED=true
        fi
        
        # Check transpiler coverage (if transpiler exists)
        if [ -f "coverage/transpiler.out" ] && [ $(echo "$TRANSPILER_COV < $MIN_TRANSPILER" | bc -l) -eq 1 ]; then
          echo "❌ Transpiler coverage ($TRANSPILER_COV%) is below minimum ($MIN_TRANSPILER%)"
          FAILED=true
        fi
        
        # Check types coverage (if types exist)
        if [ -f "coverage/types.out" ] && [ $(echo "$TYPES_COV < $MIN_TYPES" | bc -l) -eq 1 ]; then
          echo "❌ Types coverage ($TYPES_COV%) is below minimum ($MIN_TYPES%)"
          FAILED=true
        fi
        
        # Check stdlib coverage (if stdlib exists)
        if [ -f "coverage/stdlib.out" ] && [ $(echo "$STDLIB_COV < $MIN_STDLIB" | bc -l) -eq 1 ]; then
          echo "❌ Standard Library coverage ($STDLIB_COV%) is below minimum ($MIN_STDLIB%)"
          FAILED=true
        fi
        
        # Check total coverage
        if [ $(echo "$TOTAL_COV < $MIN_TOTAL" | bc -l) -eq 1 ]; then
          echo "❌ Total coverage ($TOTAL_COV%) is below minimum ($MIN_TOTAL%)"
          FAILED=true
        fi
        
        if [ "$FAILED" = true ]; then
          echo ""
          echo "## Coverage Requirements"
          echo "- Parser: minimum $MIN_PARSER% (critical language component)"
          echo "- Transpiler: minimum $MIN_TRANSPILER% (core functionality)"  
          echo "- Types: minimum $MIN_TYPES% (type safety)"
          echo "- Standard Library: minimum $MIN_STDLIB% (user-facing features)"
          echo "- Total Project: minimum $MIN_TOTAL% (overall quality)"
          echo ""
          echo "Please add tests to meet coverage requirements before merging."
          exit 1
        else
          echo "✅ All coverage requirements met!"
        fi
    
    - name: Compare with base branch (PR only)
      if: github.event_name == 'pull_request'
      run: |
        # Checkout base branch and run coverage
        git checkout ${{ github.event.pull_request.base.sha }}
        
        # Run coverage on base branch
        go test -v -coverprofile=coverage/base.out -coverpkg=./... ./... || echo "0" > coverage/base_total.txt
        
        if [ -f "coverage/base.out" ]; then
          BASE_COV=$(go tool cover -func="coverage/base.out" | grep "total:" | awk '{print $3}' | sed 's/%//')
        else
          BASE_COV="0"
        fi
        
        # Switch back to PR branch
        git checkout ${{ github.event.pull_request.head.sha }}
        
        CURRENT_COV=${{ steps.coverage.outputs.total_coverage }}
        
        echo "Base coverage: $BASE_COV%"
        echo "Current coverage: $CURRENT_COV%"
        
        # Check if coverage decreased
        if [ $(echo "$CURRENT_COV < $BASE_COV" | bc -l) -eq 1 ]; then
          DECREASE=$(echo "$BASE_COV - $CURRENT_COV" | bc -l)
          echo "❌ Coverage decreased by $DECREASE% ($BASE_COV% → $CURRENT_COV%)"
          echo "Please add tests to maintain or improve coverage."
          exit 1
        else
          INCREASE=$(echo "$CURRENT_COV - $BASE_COV" | bc -l)
          echo "✅ Coverage maintained or improved by $INCREASE% ($BASE_COV% → $CURRENT_COV%)"
        fi
    
    - name: Generate coverage report
      run: |
        # Generate HTML coverage report
        if [ -f "coverage/total.out" ]; then
          go tool cover -html=coverage/total.out -o coverage/coverage.html
        fi
        
        # Generate detailed coverage summary
        echo "# 📊 Fugo Test Coverage Report" > coverage/summary.md
        echo "" >> coverage/summary.md
        echo "| Component | Coverage | Status | Requirement |" >> coverage/summary.md
        echo "|-----------|----------|--------|-------------|" >> coverage/summary.md
        
        PARSER_COV=${{ steps.coverage.outputs.parser_coverage }}
        TRANSPILER_COV=${{ steps.coverage.outputs.transpiler_coverage }}
        TYPES_COV=${{ steps.coverage.outputs.types_coverage }}
        STDLIB_COV=${{ steps.coverage.outputs.stdlib_coverage }}
        TOTAL_COV=${{ steps.coverage.outputs.total_coverage }}
        
        # Parser status
        if [ -f "coverage/parser.out" ]; then
          if [ $(echo "$PARSER_COV >= 95" | bc -l) -eq 1 ]; then
            echo "| Parser | $PARSER_COV% | ✅ | 95%+ |" >> coverage/summary.md
          else
            echo "| Parser | $PARSER_COV% | ❌ | 95%+ |" >> coverage/summary.md
          fi
        else
          echo "| Parser | N/A | ⏳ | 95%+ |" >> coverage/summary.md
        fi
        
        # Transpiler status  
        if [ -f "coverage/transpiler.out" ]; then
          if [ $(echo "$TRANSPILER_COV >= 90" | bc -l) -eq 1 ]; then
            echo "| Transpiler | $TRANSPILER_COV% | ✅ | 90%+ |" >> coverage/summary.md
          else
            echo "| Transpiler | $TRANSPILER_COV% | ❌ | 90%+ |" >> coverage/summary.md
          fi
        else
          echo "| Transpiler | N/A | ⏳ | 90%+ |" >> coverage/summary.md
        fi
        
        # Types status
        if [ -f "coverage/types.out" ]; then
          if [ $(echo "$TYPES_COV >= 85" | bc -l) -eq 1 ]; then
            echo "| Types | $TYPES_COV% | ✅ | 85%+ |" >> coverage/summary.md
          else
            echo "| Types | $TYPES_COV% | ❌ | 85%+ |" >> coverage/summary.md
          fi
        else
          echo "| Types | N/A | ⏳ | 85%+ |" >> coverage/summary.md
        fi
        
        # Stdlib status
        if [ -f "coverage/stdlib.out" ]; then
          if [ $(echo "$STDLIB_COV >= 80" | bc -l) -eq 1 ]; then
            echo "| Standard Library | $STDLIB_COV% | ✅ | 80%+ |" >> coverage/summary.md
          else
            echo "| Standard Library | $STDLIB_COV% | ❌ | 80%+ |" >> coverage/summary.md
          fi
        else
          echo "| Standard Library | N/A | ⏳ | 80%+ |" >> coverage/summary.md
        fi
        
        # Total status
        if [ $(echo "$TOTAL_COV >= 75" | bc -l) -eq 1 ]; then
          echo "| **Total Project** | **$TOTAL_COV%** | ✅ | 75%+ |" >> coverage/summary.md
        else
          echo "| **Total Project** | **$TOTAL_COV%** | ❌ | 75%+ |" >> coverage/summary.md
        fi
        
        echo "" >> coverage/summary.md
        echo "## 🎯 Coverage Philosophy" >> coverage/summary.md
        echo "- **Parser (95%+)**: Critical - breaks everything if wrong" >> coverage/summary.md
        echo "- **Transpiler (90%+)**: Core - silent bugs are dangerous" >> coverage/summary.md  
        echo "- **Types (85%+)**: Important - catches vs causes errors" >> coverage/summary.md
        echo "- **Standard Library (80%+)**: User-facing - users can work around issues" >> coverage/summary.md
        echo "- **Total Project (75%+)**: Overall quality baseline" >> coverage/summary.md
    
    - name: Comment PR with coverage report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('coverage/summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Could not read coverage summary:', error);
          }
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage/
          !coverage/*.out

  # Job for non-Go changes - skips coverage analysis
  skip-coverage:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.go-files == 'false' }}
    
    steps:
    - name: Skip coverage analysis for non-Go changes
      run: |
        echo "✅ Skipping test coverage analysis - no Go-related files were changed"
        echo "Coverage analysis only runs when Go code, grammar, or build files are modified."