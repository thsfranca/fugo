name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  ANTLR_VERSION: '4.13.1'

jobs:
  # Single change detection job for all workflows
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.final-decision.outputs.go-files }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect file changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          go-files:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'tools/grammar/**'
          makefile-changes:
            - 'Makefile'
          has-changes:
            - '**'
            
    - name: Set up Go (for change detection)
      if: ${{ steps.changes.outputs.makefile-changes == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Analyze Makefile changes for Go relevance
      id: makefile-analysis
      if: ${{ steps.changes.outputs.makefile-changes == 'true' }}
      run: |
        cd tools/change-detector
        go build -o change-detector .
        output=$(./change-detector makefile-analysis)
        echo "$output"
        GO_RELATED=$(echo "$output" | grep "go-related=" | cut -d'=' -f2)
        echo "go-related=$GO_RELATED" >> $GITHUB_OUTPUT
        
    - name: Final Go files decision
      id: final-decision  
      run: |
        cd tools/change-detector
        if [ ! -f change-detector ]; then
          go build -o change-detector .
        fi
        
        BASIC_GO="${{ steps.changes.outputs.go-files }}"
        MAKEFILE_GO="${{ steps.makefile-analysis.outputs.go-related || 'false' }}"
        
        output=$(./change-detector final-decision "$BASIC_GO" "$MAKEFILE_GO")
        echo "$output"
        GO_FILES=$(echo "$output" | grep "go-files=" | cut -d'=' -f2)
        echo "go-files=$GO_FILES" >> $GITHUB_OUTPUT

  # Fast skip job for non-Go changes  
  skip-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.go-files == 'false' }}
    steps:
    - name: Skip Go workflows
      run: .github/scripts/ci/skip-build.sh

  # Parallel job: Build & Basic Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    # Cache ANTLR installation
    - name: Cache ANTLR
      id: antlr-cache
      uses: actions/cache@v4
      with:
        path: /usr/local/lib/antlr.jar
        key: ${{ runner.os }}-antlr-${{ env.ANTLR_VERSION }}
        
    - name: Install ANTLR
      if: steps.antlr-cache.outputs.cache-hit != 'true'
      run: |
        wget https://www.antlr.org/download/antlr-${{ env.ANTLR_VERSION }}-complete.jar -O /tmp/antlr.jar
        sudo mv /tmp/antlr.jar /usr/local/lib/
        
    - name: Setup ANTLR binary
      run: |
        echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
        echo 'java -jar /usr/local/lib/antlr.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
        sudo chmod +x /usr/local/bin/antlr4
        
    - name: Install Go dependencies
      run: |
        go mod download || echo "No modules to download"
        go mod tidy || echo "No go.mod yet"
        
    # Cache parser generation
    - name: Cache generated parsers
      id: parser-cache
      uses: actions/cache@v4
      with:
        path: tools/gen/
        key: ${{ runner.os }}-parser-${{ hashFiles('tools/grammar/**') }}
        
    - name: Generate parsers
      if: steps.parser-cache.outputs.cache-hit != 'true'
      run: |
        if [ -f "tools/grammar/Vex.g4" ]; then
          make go || echo "Parser generation failed, continuing..."
        fi
        
    - name: Run Go tests
      run: .github/scripts/ci/run-tests.sh
        
    - name: Build Go project
      run: .github/scripts/ci/build-project.sh

  # Parallel job: Coverage Analysis
  test-coverage:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
    steps:
    - name: Checkout code with history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Install Go dependencies
      run: |
        go mod download || echo "No modules to download"
        go mod tidy || echo "No go.mod yet"
        
    - name: Install coverage tools
      run: |
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
        
    - name: Run Go tests with coverage
      run: |
        mkdir -p coverage
        .github/scripts/ci/run-coverage.sh
        
    - name: Calculate coverage
      id: coverage
      run: |
        if [ -f "coverage/total.out" ] && [ -s "coverage/total.out" ]; then
          TOTAL_COV=$(go tool cover -func=coverage/total.out | grep "total:" | awk '{print $3}' | sed 's/%//' || echo "0")
          echo "total-coverage=$TOTAL_COV" >> $GITHUB_OUTPUT
          echo "[COVERAGE] Coverage: $TOTAL_COV%"
          
          # Coverage requirements based on project maturity
          GO_FILE_COUNT=$(find . -name "*.go" -not -name "*_test.go" | wc -l)
          if [ $GO_FILE_COUNT -lt 5 ]; then
            echo "⚠️ Early development - no coverage requirements yet"
          elif [ $GO_FILE_COUNT -lt 20 ]; then
            echo "📈 Growing project - aim for 40%+ coverage"
          else
            echo "🎯 Mature project - aim for 70%+ coverage"
          fi
        else
          echo "total-coverage=0" >> $GITHUB_OUTPUT
          echo "[COVERAGE] No coverage data available"
        fi
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Parallel job: Linting & Quality
  lint-and-quality:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Cache Go modules
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Install Go dependencies
      run: |
        go mod download || echo "No modules to download"
        go mod tidy || echo "No go.mod yet"
        
    # Cache linting tools
    - name: Cache linting tools
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-lint
        
    - name: Install Go linting tools
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        go install golang.org/x/lint/golint@latest
        
    - name: Check formatting (changed files only)
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
      run: .github/scripts/ci/check-formatting.sh
        
    - name: Run Go linting (smart failure handling)
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
      run: .github/scripts/ci/run-linting.sh

  # Summary job that depends on all parallel jobs
  ci-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, skip-build, build-and-test, test-coverage, lint-and-quality]
    if: always()
    steps:
    - name: Report CI Results
      run: .github/scripts/ci/generate-summary.sh "${{ needs.detect-changes.outputs.go-files }}" "${{ needs.skip-build.result }}" "${{ needs.build-and-test.result }}" "${{ needs.test-coverage.result }}" "${{ needs.lint-and-quality.result }}"
