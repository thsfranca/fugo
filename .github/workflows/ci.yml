name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job to detect what files changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.changes.outputs.go-files }}
      any-files: ${{ steps.changes.outputs.any-files }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          go-files:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'tools/grammar/**'
            - 'Makefile'
            - '.github/workflows/**'
          any-files:
            - '**'
    
    - name: Debug path detection
      run: |
        echo "üîç PATH DETECTION DEBUG"
        echo "Go files changed: ${{ steps.changes.outputs.go-files }}"
        echo "Any files changed: ${{ steps.changes.outputs.any-files }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    
    steps:
    - name: Skip Go tests for non-Go changes
      if: ${{ needs.detect-changes.outputs.go-files == 'false' }}
      run: |
        echo "‚úÖ Skipping Go tests - no Go-related files were changed"
        echo "This workflow completed successfully without running tests"
        exit 0
        
    - uses: actions/checkout@v4
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
    
    - name: Set up Go
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install ANTLR4
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Install ANTLR4 for parser generation
        wget https://www.antlr.org/download/antlr-4.13.1-complete.jar -O /tmp/antlr.jar
        sudo mv /tmp/antlr.jar /usr/local/lib/
        echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
        echo 'java -jar /usr/local/lib/antlr.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
        sudo chmod +x /usr/local/bin/antlr4
    
    - name: Generate parsers
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Generate Go parser if grammar exists
        if [ -f "tools/grammar/Fugo.g4" ]; then
          make go || echo "Parser generation failed, continuing..."
        fi
    
    - name: Install dependencies
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        go mod tidy || echo "No go.mod yet"
        go mod download || echo "No dependencies yet"
    
    - name: Run tests
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Run tests if any exist
        if find . -name "*_test.go" | grep -q .; then
          go test -v ./...
        else
          echo "No tests found yet - this is expected for early development"
        fi
    
    - name: Build project
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Try to build any main packages
        if find . -name "main.go" | grep -q .; then
          go build ./...
        else
          echo "No main packages to build yet"
        fi
    
    - name: Verify examples parse
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Verify example Fugo files can be parsed
        if [ -f "tools/gen/go/fugo_parser.go" ] && [ -d "examples" ]; then
          echo "Verifying examples can be parsed..."
          # Add parser verification logic here when ready
        fi
    
    - name: Run linters
      if: ${{ needs.detect-changes.outputs.go-files == 'true' }}
      run: |
        # Install and run basic linters
        go install golang.org/x/tools/cmd/goimports@latest
        go install golang.org/x/lint/golint@latest
        
        # Format check
        if find . -name "*.go" | grep -q .; then
          goimports -l . | tee /tmp/goimports.out
          if [ -s /tmp/goimports.out ]; then
            echo "‚ùå Code is not properly formatted"
            exit 1
          fi
          
          # Lint check (warning only for now)
          golint ./... || echo "‚ö†Ô∏è  Linting issues found (not blocking)"
        fi

