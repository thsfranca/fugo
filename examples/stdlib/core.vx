;; Vex Standard Library - Core Macros and Functions
;; This file contains essential macros that should be available in all Vex programs

;; Define the 'defn' macro for function definitions
;; (defn name [params] body) expands to (def name (fn [params] body))
(macro defn [name params body]
  (def ~name (fn ~params ~body)))

;; Define the 'when' macro for conditional execution without else
;; (when condition body) expands to (if condition body nil)
(macro when [condition body]
  (if ~condition ~body nil))

;; Define the 'unless' macro for negated conditional execution
;; (unless condition body) expands to (if (not condition) body nil)
(macro unless [condition body]
  (if (not ~condition) ~body nil))

;; Define the 'let' macro for local bindings
;; (let [var1 val1 var2 val2] body) creates local scope with bindings
(macro let [bindings body]
  ((fn [] ~body))) ;; Simplified version - full implementation would handle bindings

;; Define the 'cond' macro for multi-way conditionals
;; (cond test1 result1 test2 result2 ... :else default) 
(macro cond [& clauses]
  ;; Simplified version - full implementation would handle multiple clauses
  (if ~(first clauses) ~(second clauses) nil))

;; Define the '->' macro for threading expressions (pipe forward)
;; (-> x (f a) (g b)) expands to (g (f x a) b)
(macro -> [expr & forms]
  ;; Simplified version - full implementation would chain the forms
  ~expr)

;; Define the '->>' macro for threading last (pipe last)
;; (->> x (f a) (g b)) expands to (g b (f a x))
(macro ->> [expr & forms]
  ;; Simplified version - full implementation would chain the forms with expr last
  ~expr)

;; These macros provide the foundation for more complex Vex programs
;; and demonstrate how language features can be built in pure Vex code
;; rather than being hardcoded in the transpiler.