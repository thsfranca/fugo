;; Core Vex Language Macros
;; This file defines the essential macros for the Vex language

;; defn - Function definition macro  
;; Transforms (defn name [params] body) into (def name (fn [params] body))
(macro defn [name params body]
  (def name (fn params body)))

;; when - Conditional execution when condition is true
;; Transforms (when test body) into (if test body)
(macro when [test body]
  (if test body))

;; unless - Conditional execution when condition is false  
;; Transforms (unless test body) into (if (not test) body)
(macro unless [test body]
  (if (not test) body))

;; Collection operation macros
;; These provide safe, high-level collection operations using primitive functions

;; first - Get the first element of a collection
;; Gracefully handles missing arguments with safe fallbacks
(macro first [coll]
  (get coll 0))

;; rest - Get all elements except the first
;; Transforms (rest coll) into (slice coll 1)
(macro rest [coll]
  (slice coll 1))

;; count - Get the number of elements in a collection
;; Transforms (count coll) into (len coll)
(macro count [coll]
  (len coll))

;; cons - Prepend an element to a collection
;; Transforms (cons elem coll) into (append [elem] coll)
(macro cons [elem coll]
  (append [elem] coll))

;; empty? - Check if a collection is empty
;; Transforms (empty? coll) into (= (len coll) 0)
(macro empty? [coll]
  (= (len coll) 0))